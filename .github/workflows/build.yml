name: "build"

on:
  workflow_dispatch:
    inputs:
      phase:
        description: "Choose cache phase. Only used for naming the job."
        required: true
        type: choice
        options:
          - generate-cache
          - use-cache
          - no-cache-tool

jobs:
  build:
    strategy:
      matrix:
        cache_tool: [none, cachix-action, cache-nix-action, magic-nix-cache-action]
        target_nix_env: [marp, zenn]
    name: build_${{ matrix.target_nix_env }}_cachetool_${{ matrix.cache_tool }}_phase_${{ github.event.inputs.phase }}
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ matrix.target_nix_env }}_${{ matrix.cache_tool }}_${{ github.event.inputs.phase }}_${{ github.ref }}
      cancel-in-progress: true
    defaults:
      run:
        working-directory: ${{ matrix.target_nix_env }}

    steps:
      - uses: actions/checkout@v5

      # === Install nix & setup cache tool ===
      # none
      - name: Install nix
        uses: cachix/install-nix-action@v31
        if: ${{ matrix.cache_tool}} == 'none'

      # cachix Action
      - name: Install nix
        uses: cachix/install-nix-action@v31
        if: ${{ matrix.cache_tool}} == 'cachix-action'

      - name: Setup cache tool
        uses: cachix/cachix-action@v16
        with:
          name: ryuryu333
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        if: ${{ matrix.cache_tool }} == 'cachix-action'

      # cache-nix-action
      - name: Install nix
        uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true
        if: ${{ matrix.cache_tool}} == 'cache-nix-action'

      - name: Setup cache tool
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ matrix.target_nix_env }}-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ matrix.target_nix_env }}-${{ runner.os }}-
          gc-max-store-size-linux: 1G
          purge: true
          purge-prefixes: nix-${{ runner.os }}-
          purge-created: 0
          purge-last-accessed: 0
          purge-primary-key: never
        if: ${{ matrix.cache_tool }} == 'cache-nix-action'

      # magic-nix-cache-action
      - name: Install nix
        uses: DeterminateSystems/nix-installer-action@v20
        if: ${{ matrix.cache_tool}} == 'magic-nix-cache-action'

      - name: Setup cache tool
        uses: DeterminateSystems/magic-nix-cache-action@v13
        if: ${{ matrix.cache_tool }} == 'magic-nix-cache-action'

      # === Build ===
      - run: nix build

      # === Run test command ===
      - run: nix develop -c zenn --version
        if: ${{ matrix.target_nix_env }} == 'zenn'

      - run: nix run .#marp -- --version
        if: ${{ matrix.target_nix_env }} == 'marp'
